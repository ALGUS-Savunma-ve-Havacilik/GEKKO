ROADMAP / TODO LIST
===================

Front-End GUI in DASH
---------------------

Do it


Functionality
-------------

-Integer variables (debug)

-in case of MEAS, change value array element to string based on variable type and imode

-add combined scheduling and control elements

-Expand functionality for modular units that connect with APM Connections

-Incorporate units package

-Read in CV params from results.json (tau, tr_hi, sp_hi, bias, err_hi, cost, etc)

-allow user to load custom .apm or .csv files?

-make comparing options with output optional


Interface
---------

-Consider new names for FV/MV/Param/Const and CV/SV/Var for user simplicity

-Consolidate lb/LOWER and ub/UPPER (add LOWER and UPPER to Var)

-do intermediates need a value property? they are not initialized or passed in by csv, but are they read back from the solution?

-Load back FV MV SV CV outputs

-Load back values of scalars not as list

-Make Constant(value,name) parameter order consistent with other variable definitions.


Robustness
----------

-in IMODE=2 (MPU), look for an array with len>1 before starting to build csv. This avoids finding first_array when the variable is initialized with a scalar then throws errors for values initialized as arrays not of length 1

-if .dt() used and csv not provided, demand time variable

-check L1/L2 global with setting SP/SPHILO

-"The value of MEAS is initialized to the initial model value. "

-UPPER and LOWER matching UB and LB?

-Add check for FSTATUS on setting meas

-Confirm unique variables names

-Confirm FV MV SV CV inputs

-what happens if a variable option gets set multiple times?

-ujson for speed

-pytest on tests http://pytest.readthedocs.io/en/latest/ 

-model validations: 1. invalid (reserved keywords) in variables 2. correct imode 

-are results of FV/MV with STATUS = 0 in results.csv/json?

-case-insensitive reading of json


Code cleanup
------------

-clean up variable naming (1 function?)

-don't write csv if csv_read < 1 

-hide model properties (constants, variables, inter_equations, etc) with prepended _

-consense post-solve file reading functions so each file is only opened and processed once

-make model function writing prettier/shorter

-commas probably not needed in model file (variable=value,>lb,<ub --> variable=value <ub >lb)

-simplify the solve function (pre-solve, solve, post-solve)

-categorize and export functions from gekko.py to other files (pre-solve/solve/post-solve)

-APM JSON input

-apm.get_file write file to script location -- either delete it or remove dependancy of APM pip package


Questions
---------

-what var types can have a measurement?

-what the differnce between variable.meas = 1 and measurements.dbs?

-Do CVs have DCOST? See bad_data homework. Dr H has dcost for CV 'flow'





